<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dev on T.Muroiのblog</title>
    <link>http://blog.dtdweb.com/tags/dev/</link>
    <description>Recent content in Dev on T.Muroiのblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 06 Feb 2019 10:56:35 +0900</lastBuildDate>
    <atom:link href="http://blog.dtdweb.com/tags/dev/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GitHub Pagesで作ったカスタムドメインのブログサイトのSSL対応をした</title>
      <link>http://blog.dtdweb.com/post/2019/02/page-ssl/</link>
      <pubDate>Wed, 06 Feb 2019 10:56:35 +0900</pubDate>
      
      <guid>http://blog.dtdweb.com/post/2019/02/page-ssl/</guid>
      <description>

&lt;p&gt;実際に対応したのはこのブログ。&lt;/p&gt;

&lt;p&gt;ブログ自体最近更新も全くしていなかったし、きっと対応するのも色々と面倒な作業いるんだろうなと思い後回してにしておりました。&lt;/p&gt;

&lt;p&gt;※サーバ作業の方は仕事やら個人的にも色々とやったりしてほぼ毎日触っているし、apacheやらnginxも普段から触り慣れているのでこっちでSSL化対応ならすぐ出来るのですけど、このブログはGitHub Pagesで運用しているので色々と面倒なんだろうなと調べもせず考えていました。&lt;/p&gt;

&lt;p&gt;実際にやってみたら意外と簡単で一瞬で設定が出来てしまい。少しは調べろよと反省です…。&lt;/p&gt;

&lt;h2 id=&#34;ssl化までの対応方法:67af4d864abd816d01ec831c96158f1d&#34;&gt;SSL化までの対応方法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://t32k.me/mol/log/secure-and-fast-github-pages/&#34; target=&#34;_blank&#34;&gt;カスタムドメインのGitHub PagesをSSL対応する&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こちらの記事を参考に、というか構成が一緒のためそのまま流れに合わせて対応する事が出来ました。&lt;/p&gt;

&lt;p&gt;流れとしては下記の通り&lt;/p&gt;

&lt;h3 id=&#34;1-cloudflareでアカウントの作成:67af4d864abd816d01ec831c96158f1d&#34;&gt;1. CloudFlareでアカウントの作成&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cloudflare.com/&#34; target=&#34;_blank&#34;&gt;Cloudflare - The Web Performance &amp;amp; Security Company | Cloudflare&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記ページでアカウントの作成をし、ドメインの登録とネームサーバ情報を取得する。&lt;/p&gt;

&lt;h3 id=&#34;2-ネームサーバ設定変更:67af4d864abd816d01ec831c96158f1d&#34;&gt;2. ネームサーバ設定変更&lt;/h3&gt;

&lt;p&gt;CloudFlareでDNSの取得が出来たら取得できたネームサーバをドメイン管理画面で設定し反映する。&lt;/p&gt;

&lt;p&gt;この設定についても、ネームサーバ情報取得の際に、合わせて手順を示してくれるので手順に従って進めていくだけで問題なく設定を行う事が出来ました。&lt;/p&gt;

&lt;h3 id=&#34;3-hhtpアクセスを全てhttpsアクセスになるようルール設定:67af4d864abd816d01ec831c96158f1d&#34;&gt;3. hhtpアクセスを全てhttpsアクセスになるようルール設定&lt;/h3&gt;

&lt;p&gt;最後に、CloudFlareのPage Rules設定でhttpsを使用するように設定する事で対応完了しました。&lt;/p&gt;

&lt;p&gt;後は反映されるまで待っておしまい。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:67af4d864abd816d01ec831c96158f1d&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;実際にやってみると簡単で、作業自体は30分もあれば終わってしまう内容でした。もっと早く対応しておけばよかった…。&lt;/p&gt;

&lt;p&gt;という事でせっかくSSLにも対応したし、今後は更新さぼらずログを残していこうと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Android]地図メモというアプリをリリースしました</title>
      <link>http://blog.dtdweb.com/post/2017/03/android-mapmemo/</link>
      <pubDate>Wed, 08 Mar 2017 23:39:05 +0900</pubDate>
      
      <guid>http://blog.dtdweb.com/post/2017/03/android-mapmemo/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://blog.dtdweb.com/images/post/2017/03/ss_08_ss1.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;実際にリリースしたのは昨年なんですけどね。&lt;/p&gt;

&lt;p&gt;いい加減このブログでも記事を残しておきたいなと思い書いてみました。&lt;/p&gt;

&lt;p&gt;実際に作ったアプリは下記URLから落とせますので、よかったらDLしてください。お願いします！！&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.dtdweb.mapmemo&#34;&gt;https://play.google.com/store/apps/details?id=com.dtdweb.mapmemo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;アプリのコンセプトとしては、地図に手軽にメモを残したい。複雑な機能はいらないからシンプルにメモだけを残しておきたい。&lt;/p&gt;

&lt;p&gt;そんな感じのアプリがほしいなと考え、アプリの企画と設計なんかを1ヶ月弱くらいで考え、開発は1週間くらいで何とかリリースまで持っていきました。&lt;/p&gt;

&lt;p&gt;個人で作るアプリは途中で飽きてリリースまで行かないというのをどこかで聞いた事があるので、とりあえず2日以上の開発日数がかかるアプリは作らない。
どうしても工数がかかる場合はフェーズをわけてアップデートをしてこうというルールを決めておき、何とかリリースまで持っていけました。&lt;/p&gt;

&lt;p&gt;※実際は1週間かかったけど、仕事終わりの夜とか土日の手が空いた時間を使ってだから、一応セーフかなと自分の中では思ってます。&lt;/p&gt;

&lt;h2 id=&#34;作ってみて良かったこと:388e88fa766f08c97310badd066c987e&#34;&gt;作ってみて良かったこと&lt;/h2&gt;

&lt;p&gt;個人で開発する上で重要なのは、新しい技術取得やライブラリの使い方ではなく、一番はモチベーション維持だという事がわかりました。&lt;/p&gt;

&lt;p&gt;シンプルに、シンプルにと考えつつも途中で妄想が膨らみ、こんな機能が合ったら便利じゃね。とか考えて色々と手が止まる事がありました。&lt;/p&gt;

&lt;p&gt;逆に、この機能を作った所で誰が使うんだろう…、そもそもこのアプリを使ってくれる人はいるのか？なんてネガティブな事も考えたり。&lt;/p&gt;

&lt;p&gt;とりあえずEvernoteに最初の仕様を書いておき、途中の妄想も次フェーズとかでやれたらやろうとか考えておいてEvernoteにメモして終わり。最初の機能だけに目を向ける！という姿勢を作っておいたのは本当に良かったなと思いました。&lt;/p&gt;

&lt;h2 id=&#34;今後について:388e88fa766f08c97310badd066c987e&#34;&gt;今後について&lt;/h2&gt;

&lt;p&gt;今後は、マップ画面での検索機能や、その他ちょくちょく機能改修しつつ、デザイン周りのブラッシュアップを進めていけたらなと思います。&lt;/p&gt;

&lt;p&gt;というか本当にデザインは力を入れていきたい&amp;hellip;。外注するまででもないので、せっかくだから自分である程度デザインもやってみたいと思ってはいるのですが。&lt;/p&gt;

&lt;p&gt;とりあえずデザインガイドラインを再度確認して、まずは素材以外での修正が可能な箇所のブラッシュアップを進めていきたい。&lt;/p&gt;

&lt;p&gt;後は、業務ではなかなか試せないようなライブラリとかも積極的に取り入れたりしてみたいなと思ってます。&lt;/p&gt;

&lt;p&gt;それから、次に開発するアプリこそKotlinで開発したい。ほんといえばこのアプリもKotlinで開発したかったのですけど、途中開発をしている際にモチベーションの低下を恐れ、とりあえず今回は出す事優先にしてしまいました。。&lt;/p&gt;

&lt;p&gt;出す事が目標だったので次回こそは新しい事に挑戦しながらってみよう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AndroidのFragmentでActivityのToolbarを利用する</title>
      <link>http://blog.dtdweb.com/post/2016/10/android-fragment-toolbar/</link>
      <pubDate>Sun, 16 Oct 2016 10:00:00 +0900</pubDate>
      
      <guid>http://blog.dtdweb.com/post/2016/10/android-fragment-toolbar/</guid>
      <description>&lt;p&gt;Activityは1つでFragmentは複数あり、1つのActivityの中でView切替をしてます。&lt;/p&gt;

&lt;p&gt;その中で、あるFragmentでは検索バーを出したいなと思いToolbarを呼び出してみたのですが、inflateMenuした後にFragment切替をするとそのままMenuが残ってしまい。&lt;/p&gt;

&lt;p&gt;Fragmentを切り替えたときは検索バーを消したいなと思い下記の対応で消してみました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FragmentのonCreateView内で検索バーを追加&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override
public View onCreateView(LayoutInflater inflater, ViewGroup container,
                         Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_memo_list, container, false);

    Toolbar toolbar = (Toolbar) getActivity().findViewById(R.id.toolbar);
    toolbar.inflateMenu(R.menu.search);

    SearchView searchView = (SearchView) toolbar.getMenu().findItem(R.id.menu_search).getActionView();
    searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
        @Override
        public boolean onQueryTextSubmit(String query) {
            return false;
        }

        @Override
        public boolean onQueryTextChange(String newText) {
            return false;
        }
    });

    return view;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;getActivity().findViewByIdでActivityのViewからToolbarのインスタンスを取得し追加&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FragmentのonDestroyView内で検索バーをクリアする&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override
public void onDestroyView() {
    Toolbar toolbar = (Toolbar)getActivity().findViewById(R.id.toolbar);
    toolbar.getMenu().clear();

    super.onDestroyView();
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GitHub緑化活動経過報告(1ヶ月くらい)</title>
      <link>http://blog.dtdweb.com/2016/08/11/github-green-1-month/</link>
      <pubDate>Thu, 11 Aug 2016 05:32:42 +0000</pubDate>
      
      <guid>http://blog.dtdweb.com/2016/08/11/github-green-1-month/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://blog.dtdweb.com/images/wp-content/uploads/2016/08/github_green.png&#34; alt=&#34;github_green&#34; width=&#34;90%&#34; class=&#34;alignnone size-medium&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GitHub緑化活動自体は結構今更感があったのですが、ふと仕事以外でもコードを書く時間を意識的に持ちたいなと思い始めてみました。&lt;/p&gt;

&lt;p&gt;報告も半年とか一年くらいしてから記事を書こうと思っていた所ですが、結構１ヶ月でも思うことはあったり、少しでも自分自身へ継続の力になればと思い、記事に書いておく事にしました。&lt;/p&gt;

&lt;h2 id=&#34;やってよかったと思ったこと:d57280c6d50944ceb327397503b111c1&#34;&gt;やってよかったと思ったこと&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;いい感じにプレッシャーになるので、毎日少しでもコードに向きあうきっかけになった&lt;/li&gt;
&lt;li&gt;個人で開発していたアプリをリリースするまでもっていけた&lt;/li&gt;
&lt;li&gt;少しでもコミットを稼ごうと色々とサンプルを読んで試すようになった&lt;/li&gt;
&lt;li&gt;ドットファイル等も管理するようにしたので複数マシンでの環境共有が楽になった&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;今後考えて何とかしたいこと:d57280c6d50944ceb327397503b111c1&#34;&gt;今後考えて何とかしたいこと&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;個人開発とはいえ、公開できないコードの修正もありグラフを緑に出来ない日があった&lt;/li&gt;
&lt;li&gt;ドットファイルの変更に逃げる日もあった&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;まとめ:d57280c6d50944ceb327397503b111c1&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;案外続けようと意識してやってみると楽しくできる。緑にするために色々とネタ探しに技術調べたりするきっかけになったのも良かったと思います。&lt;/p&gt;

&lt;p&gt;※興味本位でgolangとか無駄に勉強しようとか色々おかしな方向に行きそうになったりもしたり・・・ｗ&lt;/p&gt;

&lt;p&gt;何より、ちょこちょこ作ってはモチベーションが下がり放置したりと・・・そんな感じでいたアプリを、機能落ちしてるとはいえ公開まで出来たのは良かった！&lt;/p&gt;

&lt;p&gt;※アプリについては別記事で紹介したいなと・・・。&lt;/p&gt;

&lt;p&gt;後は、実際にグラフでも隙間が出来ているようにコードを書いていても公開出来ない内容が多い時もあり、完全に緑は難しいかなと思ったり・・・。&lt;/p&gt;

&lt;p&gt;上記の事を考えつつ、もう少し半年・一年と継続してみようと思います！&lt;/p&gt;

&lt;p&gt;緑が増えていくのは楽しい！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Android]XmlPullParserException: Unexpected tokenが発生した時の対処方法</title>
      <link>http://blog.dtdweb.com/2015/06/17/android-xmlpullparserexception-unexpected-token/</link>
      <pubDate>Tue, 16 Jun 2015 23:33:03 +0000</pubDate>
      
      <guid>http://blog.dtdweb.com/2015/06/17/android-xmlpullparserexception-unexpected-token/</guid>
      <description>

&lt;p&gt;Androidアプリ開発の際、リソースファイルやHttp経由で取得したUTF-8なxmlファイルをStringReaderで読み込むと、下記の様なエラーが発生する場合、読み込んだファイルの先頭にBOMが付いている可能性があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;XmlPullParserException
org.xmlpull.v1.XmlPullParserException: Unexpected token (position:TEXT ?@1:2 in java.io.StringReader@***)
     at org.kxml2.io.KXmlParser.next(KXmlParser.java:432)
     at org.kxml2.io.KXmlParser.next(KXmlParser.java:313)
・
・
・
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;解決方法:7d33596006e6af95dde9f6df20e5121e&#34;&gt;解決方法&lt;/h2&gt;

&lt;p&gt;StringReaderで読み込む前にBOM付きかチェックして除去することで回避できました。&lt;/p&gt;

&lt;h3 id=&#34;サンプルコード:7d33596006e6af95dde9f6df20e5121e&#34;&gt;サンプルコード&lt;/h3&gt;

&lt;script src=&#34;https://gist.github.com/dtdweb/b0fe8d1c1b7580fb0345.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>[Android]URLConnectionでリダイレクトにも対応してみた</title>
      <link>http://blog.dtdweb.com/2015/06/16/url-connection-redirect/</link>
      <pubDate>Mon, 15 Jun 2015 23:52:57 +0000</pubDate>
      
      <guid>http://blog.dtdweb.com/2015/06/16/url-connection-redirect/</guid>
      <description>&lt;p&gt;org.apache.httpパッケージとAndroidHttpClientクラスがAndroid5.1(API Level 22)から非推奨になりましたね。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.android.com/about/versions/android-5.1.html&#34; target=&#34;_blank&#34;&gt;Android 5.1 APIs | Android Developers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これまでHttpClientで実装していたアプリはURLConnectionクラスを利用・変更しましょうとの事で。&lt;/p&gt;

&lt;p&gt;それで今回はURLConnectionの実装に切り替えた際に、リダイレクト処理でうまく動作しなかったので、リダイレクトに対応したサンプルメソッドを作ってみました。&lt;/p&gt;

&lt;p&gt;HttpClientなら特に30系のステータスコードでも意識する必要なかったんですけど、ちょっと面倒ですね。&lt;/p&gt;

&lt;p&gt;ということで30系でも動作するように対応したサンプルメソッド&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/dtdweb/13e25365a827df07ce07.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;一度レスポンスコードを受け取り、20x系なら正常処理、30x系の場合は再度connクラスを再生成して対応しました。&lt;/p&gt;

&lt;p&gt;にしても、IO系クラス扱うのも少し苦手だ&amp;hellip;。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>