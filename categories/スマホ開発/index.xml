<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>スマホ開発 on T.Muroiのblog</title>
    <link>http://intemous9.github.io/categories/%E3%82%B9%E3%83%9E%E3%83%9B%E9%96%8B%E7%99%BA/</link>
    <description>Recent content in スマホ開発 on T.Muroiのblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 15 Jun 2015 23:52:57 +0000</lastBuildDate>
    <atom:link href="http://intemous9.github.io/categories/%E3%82%B9%E3%83%9E%E3%83%9B%E9%96%8B%E7%99%BA/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>[Android]URLConnectionでリダイレクトにも対応してみた</title>
      <link>http://intemous9.github.io/2015/06/16/url-connection-redirect/</link>
      <pubDate>Mon, 15 Jun 2015 23:52:57 +0000</pubDate>
      
      <guid>http://intemous9.github.io/2015/06/16/url-connection-redirect/</guid>
      <description>&lt;p&gt;org.apache.httpパッケージとAndroidHttpClientクラスがAndroid5.1(API Level 22)から非推奨になりましたね。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.android.com/about/versions/android-5.1.html&#34; target=&#34;_blank&#34;&gt;Android 5.1 APIs | Android Developers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これまでHttpClientで実装していたアプリはURLConnectionクラスを利用・変更しましょうとの事で。&lt;/p&gt;

&lt;p&gt;それで今回はURLConnectionの実装に切り替えた際に、リダイレクト処理でうまく動作しなかったので、リダイレクトに対応したサンプルメソッドを作ってみました。&lt;/p&gt;

&lt;p&gt;HttpClientなら特に30系のステータスコードでも意識する必要なかったんですけど、ちょっと面倒ですね。&lt;/p&gt;

&lt;p&gt;ということで30系でも動作するように対応したサンプルメソッド&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/dtdweb/13e25365a827df07ce07.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;一度レスポンスコードを受け取り、20x系なら正常処理、30x系の場合は再度connクラスを再生成して対応しました。&lt;/p&gt;

&lt;p&gt;にしても、IO系クラス扱うのも少し苦手だ&amp;hellip;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Android]WiFi接続まわりで苦戦したのでメモ</title>
      <link>http://intemous9.github.io/2013/03/08/android-wifi-network/</link>
      <pubDate>Fri, 08 Mar 2013 13:51:10 +0000</pubDate>
      
      <guid>http://intemous9.github.io/2013/03/08/android-wifi-network/</guid>
      <description>

&lt;p&gt;AndroidのWiFi設定や変更において、色々と苦戦したのでその時の記録をメモ。&lt;/p&gt;

&lt;p&gt;(*2013年3月現在 : APILevel8~16にて動作確認)&lt;/p&gt;

&lt;p&gt;こちらの記事内容で動作確認は出来ましたが、動作保証はしかねますので、使用の際には再度ドキュメントを確認した方が良いかと思います。&lt;/p&gt;

&lt;p&gt;また、端末によって微妙に挙動が異なったり、WiFi切替まで時間もかかったりと、色々と下記以外にも調整しないといけない事が多かったです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://developer.android.com/reference/android/net/wifi/WifiManager.html&#34; target=&#34;_blank&#34;&gt;Androidリファレンス:WifiManager&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://developer.android.com/reference/android/net/wifi/WifiConfiguration.html&#34; target=&#34;_blank&#34;&gt;Androidリファレンス:WifiConfiguration&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;使用するために:506278074be7e994baf0f209d1456c13&#34;&gt;使用するために&lt;/h2&gt;

&lt;p&gt;まずAndroidManifest.xmlに下記のパーミッション追加をする必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.CHANGE\_WIFI\_STATE&amp;quot;&amp;gt;&amp;lt;/uses-permission&amp;gt;
&amp;lt;uses-permission android:name=&amp;quot;android.permission.ACCESS\_WIFI\_STATE&amp;quot;&amp;gt;&amp;lt;/uses-permission&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wifi機能をonにする:506278074be7e994baf0f209d1456c13&#34;&gt;WiFi機能をONにする&lt;/h2&gt;

&lt;p&gt;SSID登録の際は、WiFi機能が有効でないと出来ないので、もしプログラム内で有効にするには下記の方法で行う&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;WifiManager wifiManager = (WifiManager)getSystemService(Context.WIFI_SERVICE);
if (wifiManager.isWifiEnabled() == false) {
    wifiManager.setWifiEnabled(true);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のコードをActivityのonCreate等で実行しておくと良いかと思います。&lt;/p&gt;

&lt;p&gt;端末によっては、切り替わるまで少々時間もかかるようなんで注意も必要ですね。&lt;/p&gt;

&lt;h2 id=&#34;ssidを端末に設定する:506278074be7e994baf0f209d1456c13&#34;&gt;SSIDを端末に設定する&lt;/h2&gt;

&lt;p&gt;こちらもWiFi機能が無効の場合、正しく設定することができないので、先に有効にする処理を入れる必要があります。&lt;/p&gt;

&lt;p&gt;また、設定については認証方式毎に異なります。&lt;/p&gt;

&lt;h2 id=&#34;セキュリティなしのssidを設定する:506278074be7e994baf0f209d1456c13&#34;&gt;セキュリティなしのSSIDを設定する&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;WifiManager wifiManager = (WifiManager)getSystemService(Context.WIFI_SERVICE);
String ssid = &amp;quot;SSID_NAME&amp;quot;;
WifiConfiguration config = new WifiConfiguration();
config.SSID = &amp;quot;\&amp;quot;&amp;quot; + ssid + &amp;quot;\&amp;quot;&amp;quot;;
config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);
config.allowedProtocols.set(WifiConfiguration.Protocol.RSN);
config.allowedProtocols.set(WifiConfiguration.Protocol.WPA);
config.allowedAuthAlgorithms.clear();
config.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);
config.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);
config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP40);
config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP104);
config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);
config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);
int networkId = wifiManager.addNetwork(config); // 失敗した場合は-1となります
wifiManager.saveConfiguration();
wifiManager.updateNetwork(config);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;認証方式-wepのssid設定:506278074be7e994baf0f209d1456c13&#34;&gt;認証方式 : WEPのSSID設定&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;WifiManager wifiManager = (WifiManager)getSystemService(Context.WIFI_SERVICE);
String ssid = &amp;quot;SSID_NAME&amp;quot;;
WifiConfiguration config = new WifiConfiguration();
config.SSID = &amp;quot;\&amp;quot;&amp;quot; + ssid + &amp;quot;\&amp;quot;&amp;quot;;
config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);
config.allowedProtocols.set(WifiConfiguration.Protocol.RSN);
config.allowedProtocols.set(WifiConfiguration.Protocol.WPA);
config.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);
config.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.SHARED);
config.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);
config.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);
config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP40);
config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP104);
config.wepKeys[0] = &amp;quot;\&amp;quot;password\&amp;quot;&amp;quot;;
config.wepTxKeyIndex = 0;
int networkId = wifiManager.addNetwork(config); // 失敗した場合は-1となります
wifiManager.saveConfiguration();
wifiManager.updateNetwork(config);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;認証方式-wpa-wpa2-pskのssid設定:506278074be7e994baf0f209d1456c13&#34;&gt;認証方式 : WPA/WPA2-PSKのSSID設定&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;WifiManager wifiManager = (WifiManager)getSystemService(Context.WIFI_SERVICE);
String ssid = &amp;quot;SSID_NAME&amp;quot;;
WifiConfiguration config = new WifiConfiguration();
config.SSID = &amp;quot;\&amp;quot;&amp;quot; + ssid + &amp;quot;\&amp;quot;&amp;quot;;
config.allowedProtocols.set(WifiConfiguration.Protocol.RSN);
config.allowedProtocols.set(WifiConfiguration.Protocol.WPA);
config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);
config.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);
config.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);
config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP40);
config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP104);
config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);
config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);
config.preSharedKey = &amp;quot;\&amp;quot;password\&amp;quot;&amp;quot;;
int networkId = wifiManager.addNetwork(config); // 失敗した場合は-1となります
wifiManager.saveConfiguration();
wifiManager.updateNetwork(config);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;上記で作成したssidに接続する:506278074be7e994baf0f209d1456c13&#34;&gt;上記で作成したSSIDに接続する&lt;/h2&gt;

&lt;p&gt;networkIdが正しくとれていれば実際に接続を試してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;WifiManager wifiManager = (WifiManager)getSystemService(Context.WIFI_SERVICE);
int networkId = 0; // 上記設定で取得できたものを使用
String targetSSID = &amp;quot;hoge-ssid&amp;quot;;
// WiFi機能が無効の状態で呼び出されるとSSID検索の所でnullとなるので念のため例外処理を行なう
try {
    // ssidの検索を開始
    wifiManager.startScan();
    for (ScanResult result : wifiManager.getScanResults()) {
        // Android4.2以降よりダブルクォーテーションが付いてくるので除去
        String resultSSID = result.SSID.replace(&amp;quot;\&amp;quot;&amp;quot;, &amp;quot;&amp;quot;);
        if (resultSSID.equals(targetSSID)) {
            // 接続を行う
            if (networkId &amp;gt; 0) {
                // 先に既存接続先を無効にしてから接続します
                for (WifiConfiguration c0 : wifiManager.getConfiguredNetworks()) {
                    wifiManager.enableNetwork(c0.networkId, false);
                }
                wifiManager.enableNetwork(networkId, true);
            }
            break;
        }
    }
} catch (NullPointerException e) {
   // 適切な例外処理をしてください。
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでひと通りSSID設定と、接続まで出来るようになりました。&lt;/p&gt;

&lt;p&gt;接続タイミングやWiFi切替等、微妙に調整の必要があるため結構大変でした。&lt;/p&gt;

&lt;p&gt;また、認証方式毎の設定についても理解しきれていない所もあるんで、もっと勉強しないとなと思いました。&lt;/p&gt;

&lt;p&gt;詳しい方いましたら、ぜひアドバイスや間違いをご指摘頂けると嬉しいです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PhoneGapで始めるスマホアプリ開発-iOS編　HelloWorldを表示！各種APIを試すまで</title>
      <link>http://intemous9.github.io/2012/07/09/phonegap-ios-2/</link>
      <pubDate>Sun, 08 Jul 2012 17:12:39 +0000</pubDate>
      
      <guid>http://intemous9.github.io/2012/07/09/phonegap-ios-2/</guid>
      <description>

&lt;p&gt;こんにちは！&lt;/p&gt;

&lt;p&gt;前回の記事&lt;/p&gt;

&lt;p&gt;[PhoneGapで始めるスマホアプリ開発~iOS編(セットアップ)~][1]&lt;/p&gt;

&lt;p&gt;こちらでPhoneGapでの開発環境を作ったので、引き続き実際にコードを書きながら色々と試してみました。&lt;/p&gt;

&lt;p&gt;この記事ではHello Worldを出すまでまとめようと思っていたのですが、表示までなら前回のでほぼ出来ていた事にこの記事を書きながら気づきました&amp;#8230;。&lt;/p&gt;

&lt;p&gt;とういう事で今回は、用意されているAPIや実際にAPIを実行するために覚えておくと良さそうな事をまとめました。&lt;/p&gt;

&lt;h2 id=&#34;hello-worldを表示してみる:1be1945f749a4b2342d7edd66c6a7749&#34;&gt;Hello Worldを表示してみる&lt;/h2&gt;

&lt;p&gt;早速Hello Worldを表示してみました。&lt;/p&gt;

&lt;p&gt;前回と同様にXcodeを起動し、index.htmlを開きます。&lt;/p&gt;

&lt;p&gt;本当に「Hello World」だけを表示するためindex.htmlの中身を最低限にしてみました。&lt;/p&gt;

&lt;h3 id=&#34;index-html:1be1945f749a4b2342d7edd66c6a7749&#34;&gt;index.html&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no;&amp;quot; /&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; media=&amp;quot;only screen and (max-device-width: 480px)&amp;quot; href=&amp;quot;iphone.css&amp;quot; type=&amp;quot;text/css&amp;quot; /&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; charset=&amp;quot;utf-8&amp;quot; src=&amp;quot;cordova-1.8.1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Hello World!! PhoneGap!&amp;lt;/h1&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;静的な画面を出すだけならHTMLの編集だけで表示することが出来るようですね。&lt;/p&gt;

&lt;h2 id=&#34;apiを呼び出すために覚えたい事:1be1945f749a4b2342d7edd66c6a7749&#34;&gt;APIを呼び出すために覚えたい事&lt;/h2&gt;

&lt;h3 id=&#34;アプリケーション上でドラッグを禁止する場合:1be1945f749a4b2342d7edd66c6a7749&#34;&gt;アプリケーション上でドラッグを禁止する場合&lt;/h3&gt;

&lt;p&gt;禁止する場合は、先程のindex.htmlのhead内に下記のコードを追記する事で設定する事が出来ます。&lt;/p&gt;

&lt;h4 id=&#34;index-html-1:1be1945f749a4b2342d7edd66c6a7749&#34;&gt;index.html&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function preventBehavior(e) {
    e.preventDefault();
}
document.addEventListener(&amp;quot;touchmove&amp;quot;, preventBehavior, false);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;phonegapの各種apiを使うために重要な項目:1be1945f749a4b2342d7edd66c6a7749&#34;&gt;PhoneGapの各種APIを使うために重要な項目&lt;/h3&gt;

&lt;p&gt;PhoneGapのAPIを使用するためには、JavaScriptコードとネイティブコードのロードが完了した時点でAPIの処理を呼び出す必要があります。&lt;/p&gt;

&lt;p&gt;なのでAPIを使う場合は下記のメソッド内で処理を記述していきます。&lt;/p&gt;

&lt;p&gt;恐らく開発を行なう上で下記のメソッド一番重要になるのではないかと思います。&lt;/p&gt;

&lt;p&gt;index.html(JS部分)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// ロード完了時点に呼び出す
function onBodyLoad() {
    document.addEventListener(&amp;quot;deviceready&amp;quot;, onDeviceReady, false);
}

// PhoneGapライブラリ/ネイティブコードのロード後に呼び出す
function onDeviceReady() {
    // この中でAPI処理を扱う
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;index.html(html部分)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- ロード完了時に呼び出すようにします --&amp;gt;
&amp;lt;body onload=&amp;quot;onBodyLoad()&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで準備は完了となります。&lt;/p&gt;

&lt;h2 id=&#34;apiを試してみました:1be1945f749a4b2342d7edd66c6a7749&#34;&gt;APIを試してみました&lt;/h2&gt;

&lt;p&gt;せっかくなんで、簡単に使えるAPIを試してみました。&lt;/p&gt;

&lt;h3 id=&#34;端末情報を取得するapi-device-api:1be1945f749a4b2342d7edd66c6a7749&#34;&gt;端末情報を取得するAPI(Device API)&lt;/h3&gt;

&lt;p&gt;端末の情報を取得API、Device APIを実験に使用してみました。&lt;/p&gt;

&lt;p&gt;参考： &lt;a href=&#34;http://docs.phonegap.com/en/1.0.0/phonegap_device_device.md.html#Device&#34; target=&#34;_blank&#34; &gt;Device APIドキュメント&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;サンプルコード&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no;&amp;quot; /&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; media=&amp;quot;only screen and (max-device-width: 480px)&amp;quot; href=&amp;quot;iphone.css&amp;quot; type=&amp;quot;text/css&amp;quot; /&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; charset=&amp;quot;utf-8&amp;quot; src=&amp;quot;cordova-1.8.1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    // ロード完了時点に呼び出す
    function onBodyLoad()
    {       
        document.addEventListener(&amp;quot;deviceready&amp;quot;, onDeviceReady, false);
    }
    // PhoneGapライブラリ/ネイティブコードのロード後に呼び出す
    function onDeviceReady()
    {
        // 端末情報を取得して表示する
        document.getElementById(&#39;deviceDesc&#39;).innerHTML =
        &#39;&amp;lt;ul&amp;gt;&#39; +
        &#39;&amp;lt;li&amp;gt;device=&#39; + device.name + &#39;&amp;lt;/li&amp;gt;&#39; +
        &#39;&amp;lt;li&amp;gt;platform=&#39; + device.platform + &#39;&amp;lt;/li&amp;gt;&#39; +
        &#39;&amp;lt;li&amp;gt;UUID=&#39; + device.uuid + &#39;&amp;lt;/li&amp;gt;&#39; +
        &#39;&amp;lt;li&amp;gt;version=&#39; + device.version + &#39;&amp;lt;/li&amp;gt;&#39; +
        &#39;&amp;lt;/ul&amp;gt;&#39;;
    }
    &amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;!-- ロード完了時に呼び出すようにします --&amp;gt;
  &amp;lt;body onload=&amp;quot;onBodyLoad()&amp;quot;&amp;gt;
      &amp;lt;h1&amp;gt;API Test&amp;lt;/h1&amp;gt;
      &amp;lt;p id=&amp;quot;deviceDesc&amp;quot;&amp;gt;DeviceInfo&amp;lt;/p&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;呼び出し方もとても簡単で、すぐに使用することが出来ました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:1be1945f749a4b2342d7edd66c6a7749&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;まだまだ、これだけでは全然アプリを作れる状態ではないのですがAPIの呼び出し方と簡単ですが記述方法も覚える事が出来たので、引き続き色々と実験しながらやっていきたいと思います。&lt;/p&gt;

&lt;p&gt;覚える事は沢山ありますが、HTMLベースで書けるという事はだいぶ敷居も低くなりますし、何よりデバイス共通で行けるというのは本当に強いですね。&lt;/p&gt;

&lt;p&gt;もっともっと実験しながら勉強していきます。&lt;/p&gt;

&lt;p&gt;参考URLまとめ:&lt;/p&gt;

&lt;p&gt;・&lt;a href=&#34;http://docs.phonegap.com/en/1.0.0/&#34; target=&#34;_blank&#34;&gt;PhoneGap API Reference&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PhoneGapで始めるスマホアプリ開発~iOS編(セットアップ)~</title>
      <link>http://intemous9.github.io/2012/06/26/phonegap-ios-1/</link>
      <pubDate>Tue, 26 Jun 2012 00:32:09 +0000</pubDate>
      
      <guid>http://intemous9.github.io/2012/06/26/phonegap-ios-1/</guid>
      <description>

&lt;p&gt;&lt;span style=&#34;font-size:10px;&#34;&gt;&lt;img src=&#34;http://farm6.static.flickr.com/5224/5682929553_7930aabc82_m.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;build.phonegap / doctorserone&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;スマホアプリの開発を行なう場合、それぞれ開発をするとなるとiPhoneならObjective-C、AndroidならJavaと言語も異なり、同時に開発を進めたい時とか色々と考える事ありますよね。&lt;/p&gt;

&lt;p&gt;両言語を理解していればいいのですが、例えば自分の場合はJavaしか分かっておらず、Objective-Cはなかなか敷居の高いものでした。&lt;/p&gt;

&lt;p&gt;上記も踏まえ、今回は出来るならなるべく同時にリリースしたい、メンテする上でも合わせて保守したいと考えまして、クロスプラットフォーム開発を行なう事のできるフレームワークを覚えてみようと思いました。&lt;/p&gt;

&lt;p&gt;調べてみるとフレームワーク自体は沢山ある様で。&lt;/p&gt;

&lt;p&gt;せっかくなんでひと通り試してみようと思い、最初はPhoneGapから手を出してみました。&lt;/p&gt;

&lt;h2 id=&#34;phonegapとは:cd02f337e2fe8fb590505b5861d064de&#34;&gt;PhoneGapとは&lt;/h2&gt;

&lt;p&gt;Adobeによって開発されているオープンソースのフレームワークです。&lt;/p&gt;

&lt;p&gt;(MIT/BSDのデュアルライセンス)&lt;/p&gt;

&lt;p&gt;公式サイト:&lt;a target=&#34;_blank&#34; href=&#34;http://phonegap.com/&#34;&gt;&lt;a href=&#34;http://phonegap.com/&#34;&gt;http://phonegap.com/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(2012/6時点のversionは1.8.1が最新となっておりました)&lt;/p&gt;

&lt;p&gt;このフレームワークでは、HTML+JavaScript+CSSを使ってWebアプリの開発を行なう様に開発を進める事ができます。&lt;/p&gt;

&lt;p&gt;ネイティブで利用するようなAPIも下記の通り数多く用意されている様です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;モーションセンサ&lt;/li&gt;
&lt;li&gt;カメラ&lt;/li&gt;
&lt;li&gt;マイク&lt;/li&gt;
&lt;li&gt;コンパス&lt;/li&gt;
&lt;li&gt;回線情報&lt;/li&gt;
&lt;li&gt;電話帳&lt;/li&gt;
&lt;li&gt;デバイス情報&lt;/li&gt;
&lt;li&gt;タッチ操作&lt;/li&gt;
&lt;li&gt;ファイルシステム&lt;/li&gt;
&lt;li&gt;GPS&lt;/li&gt;
&lt;li&gt;プッシュ通知&lt;/li&gt;
&lt;li&gt;ストレージアクセス&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Supported Featuresより抜粋させて頂きました)&lt;/p&gt;

&lt;h2 id=&#34;開発準備:cd02f337e2fe8fb590505b5861d064de&#34;&gt;開発準備&lt;/h2&gt;

&lt;p&gt;では早速、開発までの準備をしていきたいと思います。&lt;/p&gt;

&lt;p&gt;開発を行なうで必要になるものが&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IntelベースのMacOS X&lt;/li&gt;
&lt;li&gt;Xcode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この2つとなります。&lt;/p&gt;

&lt;h2 id=&#34;開発準備-ダウンロードとインストール:cd02f337e2fe8fb590505b5861d064de&#34;&gt;開発準備(ダウンロードとインストール)&lt;/h2&gt;

&lt;p&gt;それでは公式サイトよりダウンロードしてみます。&lt;/p&gt;

&lt;p&gt;(トップからだと右上にDownLoadリンクがあります。)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://phonegap.com/download&#34; target=&#34;_blank&#34;&gt;ダウンロードページ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;実際に私がダウンロードしたときは、最新が1.8.1でした。&lt;/p&gt;

&lt;p&gt;zipファイルでダウンロードして解凍すると下記のファイル構成となっていました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dtdweb.com/wp-content/uploads/2012/06/ss1.png&#34;&gt;&lt;img src=&#34;http://dtdweb.com/wp-content/uploads/2012/06/ss1.png&#34; alt=&#34;&#34; title=&#34;contents_1&#34; width=&#34;500&#34; height=&#34;151&#34; class=&#34;aligncenter size-full wp-image-82&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;libの中にそれぞれOS用のファイルが用意されていました。&lt;/p&gt;

&lt;p&gt;今回はiOSの開発準備ということでCordova-1.8.1.dmgというファイルをマウントします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dtdweb.com/wp-content/uploads/2012/06/ss2.png&#34;&gt;&lt;img src=&#34;http://dtdweb.com/wp-content/uploads/2012/06/ss2.png&#34; alt=&#34;&#34; title=&#34;ss2&#34; width=&#34;500&#34; height=&#34;220&#34; class=&#34;aligncenter size-full wp-image-84&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;マウントしてみると、Cordova-1.8.1.pkgというファイルがあります。&lt;/p&gt;

&lt;p&gt;今度はこれをインストールします。&lt;/p&gt;

&lt;p&gt;基本的には手順に従うだけで簡単にインストールできました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dtdweb.com/wp-content/uploads/2012/06/ss3.png&#34;&gt;&lt;img src=&#34;http://dtdweb.com/wp-content/uploads/2012/06/ss3.png&#34; alt=&#34;&#34; title=&#34;ss3&#34; width=&#34;500&#34; height=&#34;435&#34; class=&#34;aligncenter size-full wp-image-86&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;特に何も変更せず「続ける」を押していきます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dtdweb.com/wp-content/uploads/2012/06/ss4.png&#34;&gt;&lt;img src=&#34;http://dtdweb.com/wp-content/uploads/2012/06/ss4.png&#34; alt=&#34;&#34; title=&#34;ss4&#34; width=&#34;500&#34; height=&#34;432&#34; class=&#34;aligncenter size-full wp-image-87&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これで完了です。&lt;/p&gt;

&lt;p&gt;インストールを行なうことでXcodeを使って開発する準備が整いました。&lt;/p&gt;

&lt;h2 id=&#34;開発準備-xcode:cd02f337e2fe8fb590505b5861d064de&#34;&gt;開発準備(Xcode)&lt;/h2&gt;

&lt;p&gt;インストールが完了したので、早速Xcodeを起動してみます。&lt;/p&gt;

&lt;p&gt;起動して新規プロジェクト作成画面を開くと、PhoneGap開発用のプロジェクトが追加されていました。&lt;/p&gt;

&lt;p&gt;(Cordova-based-Applicationというものですね)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dtdweb.com/wp-content/uploads/2012/06/ss5.png&#34;&gt;&lt;img src=&#34;http://dtdweb.com/wp-content/uploads/2012/06/ss5.png&#34; alt=&#34;&#34; title=&#34;ss5&#34; width=&#34;500&#34; height=&#34;480&#34; class=&#34;aligncenter size-full wp-image-90&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記プロジェクトを選択してまずサンプルでプロジェクトを作ってみます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dtdweb.com/wp-content/uploads/2012/06/ss6.png&#34;&gt;&lt;img src=&#34;http://dtdweb.com/wp-content/uploads/2012/06/ss6.png&#34; alt=&#34;&#34; title=&#34;ss6&#34; width=&#34;500&#34; height=&#34;487&#34; class=&#34;aligncenter size-full wp-image-91&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ただ、このままでは実際に開発で使用するディレクトリがないため、開発用のｗｗｗディレクトリを追加します。&lt;/p&gt;

&lt;p&gt;プロジェクトのルートよりshow Finderをクリックすることで、Finderが表示され、開いた所にｗｗｗディレクトリがありますので、これを先程作成したプロジェクトにドラッグ&amp;amp;ドロップします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dtdweb.com/wp-content/uploads/2012/06/ss8.png&#34;&gt;&lt;img src=&#34;http://dtdweb.com/wp-content/uploads/2012/06/ss8.png&#34; alt=&#34;&#34; title=&#34;ss8&#34; width=&#34;500&#34; height=&#34;204&#34; class=&#34;aligncenter size-full wp-image-98&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;「右クリック」で上記の様にメニューが表示されますので選択します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dtdweb.com/wp-content/uploads/2012/06/ss9.png&#34;&gt;&lt;img src=&#34;http://dtdweb.com/wp-content/uploads/2012/06/ss9.png&#34; alt=&#34;&#34; title=&#34;ss9&#34; width=&#34;412&#34; height=&#34;140&#34; class=&#34;aligncenter size-full wp-image-100&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ディレクトリと、その中身「index.html」と「cordova-1.8.1.js」も追加します。&lt;/p&gt;

&lt;p&gt;実際に追加してみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dtdweb.com/wp-content/uploads/2012/06/ss10.png&#34;&gt;&lt;img src=&#34;http://dtdweb.com/wp-content/uploads/2012/06/ss10.png&#34; alt=&#34;&#34; title=&#34;ss10&#34; width=&#34;250&#34; height=&#34;147&#34; class=&#34;aligncenter size-full wp-image-101&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;追加してXcodeのプロジェクトより確認した画面が上記の通りとなります。&lt;/p&gt;

&lt;p&gt;これでエミュレータを起動してみるとエラーも出ずに正常に起動することが出来ました。&lt;/p&gt;

&lt;p&gt;ここまででiOSでの開発準備も出来ましたので、次回よりHello Worldの表示や実際にAPIなども使って色々と実験していきたいと思います。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>